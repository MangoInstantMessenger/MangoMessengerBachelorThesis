#,Title,Category,Interaction,Description,Possible Mitigation(s),,,,,
1,An adversary may gain unauthorized access to Web API due to poor access control checks,Elevation of Privileges,Web App Request,An adversary may gain unauthorized access to Web API due to poor access control checks,Implement proper authorization mechanism in ASP.NET Web API. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#authz-aspnet&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#authz-aspnet&amp;amp;lt;/a&amp;amp;gt;,,,,,
2,An adversary can gain access to sensitive information from an API through error messages,Information Disclosure,Web App Request,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names - Connection strings - Usernames - Passwords - SQL procedures - Details of dynamic SQL failures - Stack trace and lines of code - Variables stored in memory - Drive and folder locations - Application install points - Host configuration settings - Other internal application details ",Ensure that proper exception handling is done in ASP.NET Web API. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#exception&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#exception&amp;amp;lt;/a&amp;amp;gt;,,,,,
3,An adversary can gain access to sensitive data by sniffing traffic to Web API,Information Disclosure,Web App Request,An adversary can gain access to sensitive data by sniffing traffic to Web API,Force all traffic to Web APIs over HTTPS connection. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcommsec#webapi-https&amp;quot;&amp;amp;gt;https://aka.ms/tmtcommsec#webapi-https&amp;amp;lt;/a&amp;amp;gt;,,,,,
4,An adversary can gain access to sensitive data stored in Web API's config files,Information Disclosure,Web App Request,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.",Encrypt sections of Web API&amp;#39;s configuration files that contain sensitive data. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtconfigmgmt#config-sensitive&amp;quot;&amp;amp;gt;https://aka.ms/tmtconfigmgmt#config-sensitive&amp;amp;lt;/a&amp;amp;gt;,,,,,
5,Attacker can deny a malicious act on an API leading to repudiation issues,Repudiation,Web App Request,Attacker can deny a malicious act on an API leading to repudiation issues,Ensure that auditing and logging is enforced on Web API. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#logging-web-api&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#logging-web-api&amp;amp;lt;/a&amp;amp;gt;,,,,,
6,An adversary may spoof Mango Web Application and gain access to Web API,Spoofing,Web App Request,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application ",Ensure that standard authentication techniques are used to secure Web APIs. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#authn-secure-api&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#authn-secure-api&amp;amp;lt;/a&amp;amp;gt;,,,,,
7,An adversary may inject malicious inputs into an API and affect downstream processes,Tampering,Web App Request,An adversary may inject malicious inputs into an API and affect downstream processes,Ensure that model validation is done on Web API methods. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#validation-api&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#validation-api&amp;amp;lt;/a&amp;amp;gt; Implement input validation on all string type parameters accepted by Web API methods. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#string-api&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#string-api&amp;amp;lt;/a&amp;amp;gt;,,,,,
8,An adversary can gain access to sensitive data by performing SQL injection through Web API,Tampering,Web App Request,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",Ensure that type-safe parameters are used in Web API for data access. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#typesafe-api&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#typesafe-api&amp;amp;lt;/a&amp;amp;gt;,,,,,
9,An adversary can reverse weakly encrypted or hashed content,Information Disclosure,Web API Response,An adversary can reverse weakly encrypted or hashed content,"Do not expose security details in error messages. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#messages&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#messages&amp;amp;lt;/a&amp;amp;gt; Implement Default error handling page. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#default&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#default&amp;amp;lt;/a&amp;amp;gt; Set Deployment Method to Retail in IIS. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#deployment&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#deployment&amp;amp;lt;/a&amp;amp;gt; Use only approved symmetric block ciphers and key lengths. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#cipher-length&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#cipher-length&amp;amp;lt;/a&amp;amp;gt; Use approved block cipher modes and initialization vectors for symmetric ciphers. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#vector-ciphers&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#vector-ciphers&amp;amp;lt;/a&amp;amp;gt; Use approved asymmetric algorithms, key lengths, and padding. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#padding&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#padding&amp;amp;lt;/a&amp;amp;gt; Use approved random number generators. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#numgen&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#numgen&amp;amp;lt;/a&amp;amp;gt; Do not use symmetric stream ciphers. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#stream-ciphers&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#stream-ciphers&amp;amp;lt;/a&amp;amp;gt; Use approved MAC/HMAC/keyed hash algorithms. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#mac-hash&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#mac-hash&amp;amp;lt;/a&amp;amp;gt; Use only approved cryptographic hash functions. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#hash-functions&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#hash-functions&amp;amp;lt;/a&amp;amp;gt; Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcommsec#x509-ssltls&amp;quot;&amp;amp;gt;https://aka.ms/tmtcommsec#x509-ssltls&amp;amp;lt;/a&amp;amp;gt;",,,,,
10,An adversary may gain access to sensitive data from log files,Information Disclosure,Web API Response,An adversary may gain access to sensitive data from log files,Ensure that the application does not log sensitive user data. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#log-sensitive-data&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#log-sensitive-data&amp;amp;lt;/a&amp;amp;gt; Ensure that Audit and Log Files have Restricted Access. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#log-restricted-access&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#log-restricted-access&amp;amp;lt;/a&amp;amp;gt;,,,,,
11,An adversary can gain access to sensitive information through error messages,Information Disclosure,Web API Response,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names  - Connection strings  - Usernames  - Passwords  - SQL procedures  - Details of dynamic SQL failures  - Stack trace and lines of code  - Variables stored in memory  - Drive and folder locations  - Application install points  - Host configuration settings  - Other internal application details ",Do not expose security details in error messages. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#messages&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#messages&amp;amp;lt;/a&amp;amp;gt; Implement Default error handling page. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#default&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#default&amp;amp;lt;/a&amp;amp;gt; Set Deployment Method to Retail in IIS. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#deployment&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#deployment&amp;amp;lt;/a&amp;amp;gt; Exceptions should fail safely. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#fail&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#fail&amp;amp;lt;/a&amp;amp;gt; ASP.NET applications must disable tracing and debugging prior to deployment. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtconfigmgmt#trace-deploy&amp;quot;&amp;amp;gt;https://aka.ms/tmtconfigmgmt#trace-deploy&amp;amp;lt;/a&amp;amp;gt; Implement controls to prevent username enumeration. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#controls-username-enum&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#controls-username-enum&amp;amp;lt;/a&amp;amp;gt;,,,,,
12,Attacker can deny the malicious act and remove the attack foot prints leading to repudiation issues,Repudiation,Web API Response,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system",Ensure that auditing and logging is enforced on the application. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#auditing&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#auditing&amp;amp;lt;/a&amp;amp;gt; Ensure that log rotation and separation are in place. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#log-rotation&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#log-rotation&amp;amp;lt;/a&amp;amp;gt; Ensure that Audit and Log Files have Restricted Access. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#log-restricted-access&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#log-restricted-access&amp;amp;lt;/a&amp;amp;gt; Ensure that User Management Events are Logged. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#user-management&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#user-management&amp;amp;lt;/a&amp;amp;gt;,,,,,
13,An adversary can spoof the target web application due to insecure TLS certificate configuration,Spoofing,Web API Response,Ensure that TLS certificate parameters are configured with correct values,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcommsec#x509-ssltls&amp;quot;&amp;amp;gt;https://aka.ms/tmtcommsec#x509-ssltls&amp;amp;lt;/a&amp;amp;gt;",,,,,
14,An adversary can steal sensitive data like user credentials,Spoofing,Web API Response,"Attackers can exploit weaknesses in system to steal user credentials. Downstream and upstream components are often accessed by using credentials stored in configuration stores. Attackers may steal the upstream or downstream component credentials. Attackers may steal credentials if, Credentials are stored and sent in clear text, Weak input validation coupled with dynamic sql queries, Password retrieval mechanism are poor,  ",Explicitly disable the autocomplete HTML attribute in sensitive forms and inputs. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtdata#autocomplete-input&amp;quot;&amp;amp;gt;https://aka.ms/tmtdata#autocomplete-input&amp;amp;lt;/a&amp;amp;gt; Perform input validation and filtering on all string type Model properties. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#typemodel&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#typemodel&amp;amp;lt;/a&amp;amp;gt; Validate all redirects within the application are closed or done safely. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#redirect-safe&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#redirect-safe&amp;amp;lt;/a&amp;amp;gt; Enable step up or adaptive authentication. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#step-up-adaptive-authn&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#step-up-adaptive-authn&amp;amp;lt;/a&amp;amp;gt; Implement forgot password functionalities securely. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#forgot-pword-fxn&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#forgot-pword-fxn&amp;amp;lt;/a&amp;amp;gt; Ensure that password and account policy are implemented. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#pword-account-policy&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#pword-account-policy&amp;amp;lt;/a&amp;amp;gt; Implement input validation on all string type parameters accepted by Controller methods. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#string-method&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#string-method&amp;amp;lt;/a&amp;amp;gt;,,,,,
15,An adversary can create a fake website and launch phishing attacks,Spoofing,Web API Response,"Phishing is attempted to obtain sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money), often for malicious reasons, by masquerading as a Web Server which is a trustworthy entity in electronic communication","Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcommsec#x509-ssltls&amp;quot;&amp;amp;gt;https://aka.ms/tmtcommsec#x509-ssltls&amp;amp;lt;/a&amp;amp;gt; Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtconfigmgmt#ui-defenses&amp;quot;&amp;amp;gt;https://aka.ms/tmtconfigmgmt#ui-defenses&amp;amp;lt;/a&amp;amp;gt; Validate all redirects within the application are closed or done safely. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#redirect-safe&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#redirect-safe&amp;amp;lt;/a&amp;amp;gt;",,,,,
16,An adversary can gain unauthorized access to database due to lack of network access protection,Elevation of Privileges,DB Request,"If there is no restriction at network or host firewall level, to access the database then anyone can attempt to connect to the database from an unauthorized location","Configure a Windows Firewall for Database Engine Access. Refer: <a href=""https://aka.ms/tmtconfigmgmt#firewall-db"">https://aka.ms/tmtconfigmgmt#firewall-db</a>",,,,,
17,An adversary can gain access to sensitive data stored in Web App's config files,Tampering,Web API Response,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.",Encrypt sections of Web App&amp;#39;s configuration files that contain sensitive data. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtdata#encrypt-data&amp;quot;&amp;amp;gt;https://aka.ms/tmtdata#encrypt-data&amp;amp;lt;/a&amp;amp;gt;,,,,,
18,An adversary can perform action on behalf of other user due to lack of controls against cross domain requests,Denial of Service,Browser UI Update,Failure to restrict requests originating from third party domains may result in unauthorized actions or access of data,Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtconfigmgmt#ui-defenses&amp;quot;&amp;amp;gt;https://aka.ms/tmtconfigmgmt#ui-defenses&amp;amp;lt;/a&amp;amp;gt; Ensure that only trusted origins are allowed if CORS is enabled on ASP.NET Web Applications. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtconfigmgmt#cors-aspnet&amp;quot;&amp;amp;gt;https://aka.ms/tmtconfigmgmt#cors-aspnet&amp;amp;lt;/a&amp;amp;gt; Mitigate against Cross-Site Request Forgery (CSRF) attacks on ASP.NET web pages. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtsmgmt#csrf-asp&amp;quot;&amp;amp;gt;https://aka.ms/tmtsmgmt#csrf-asp&amp;amp;lt;/a&amp;amp;gt;,,,,,
19,An adversary may bypass critical steps or perform actions on behalf of other users (victims) due to improper validation logic,Elevation of Privileges,Browser UI Update,Failure to restrict the privileges and access rights to the application to individuals who require the privileges or access rights may result into unauthorized use of data due to inappropriate rights settings and validation.,Ensure that administrative interfaces are appropriately locked down. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#admin-interface-lockdown&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#admin-interface-lockdown&amp;amp;lt;/a&amp;amp;gt; Enforce sequential step order when processing business logic flows. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#sequential-logic&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#sequential-logic&amp;amp;lt;/a&amp;amp;gt; Ensure that proper authorization is in place and principle of least privileges is followed. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#principle-least-privilege&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#principle-least-privilege&amp;amp;lt;/a&amp;amp;gt; Business logic and resource access authorization decisions should not be based on incoming request parameters. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#logic-request-parameters&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#logic-request-parameters&amp;amp;lt;/a&amp;amp;gt; Ensure that content and resources are not enumerable or accessible via forceful browsing. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#enumerable-browsing&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#enumerable-browsing&amp;amp;lt;/a&amp;amp;gt;,,,,,
20,An adversary can reverse weakly encrypted or hashed content,Information Disclosure,Browser UI Update,An adversary can reverse weakly encrypted or hashed content,"Do not expose security details in error messages. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#messages&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#messages&amp;amp;lt;/a&amp;amp;gt; Implement Default error handling page. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#default&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#default&amp;amp;lt;/a&amp;amp;gt; Set Deployment Method to Retail in IIS. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtxmgmt#deployment&amp;quot;&amp;amp;gt;https://aka.ms/tmtxmgmt#deployment&amp;amp;lt;/a&amp;amp;gt; Use only approved symmetric block ciphers and key lengths. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#cipher-length&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#cipher-length&amp;amp;lt;/a&amp;amp;gt; Use approved block cipher modes and initialization vectors for symmetric ciphers. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#vector-ciphers&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#vector-ciphers&amp;amp;lt;/a&amp;amp;gt; Use approved asymmetric algorithms, key lengths, and padding. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#padding&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#padding&amp;amp;lt;/a&amp;amp;gt; Use approved random number generators. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#numgen&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#numgen&amp;amp;lt;/a&amp;amp;gt; Do not use symmetric stream ciphers. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#stream-ciphers&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#stream-ciphers&amp;amp;lt;/a&amp;amp;gt; Use approved MAC/HMAC/keyed hash algorithms. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#mac-hash&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#mac-hash&amp;amp;lt;/a&amp;amp;gt; Use only approved cryptographic hash functions. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#hash-functions&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#hash-functions&amp;amp;lt;/a&amp;amp;gt; Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcommsec#x509-ssltls&amp;quot;&amp;amp;gt;https://aka.ms/tmtcommsec#x509-ssltls&amp;amp;lt;/a&amp;amp;gt;",,,,,
21,An adversary may gain access to sensitive data from log files,Information Disclosure,Browser UI Update,An adversary may gain access to sensitive data from log files,Ensure that the application does not log sensitive user data. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#log-sensitive-data&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#log-sensitive-data&amp;amp;lt;/a&amp;amp;gt; Ensure that Audit and Log Files have Restricted Access. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#log-restricted-access&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#log-restricted-access&amp;amp;lt;/a&amp;amp;gt;,,,,,
22,An adversary can spoof the target web application due to insecure TLS certificate configuration,Spoofing,Browser UI Update,Ensure that TLS certificate parameters are configured with correct values,"Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcommsec#x509-ssltls&amp;quot;&amp;amp;gt;https://aka.ms/tmtcommsec#x509-ssltls&amp;amp;lt;/a&amp;amp;gt;",,,,,
23,An adversary can steal sensitive data like user credentials,Spoofing,Browser UI Update,"Attackers can exploit weaknesses in system to steal user credentials. Downstream and upstream components are often accessed by using credentials stored in configuration stores. Attackers may steal the upstream or downstream component credentials. Attackers may steal credentials if, Credentials are stored and sent in clear text, Weak input validation coupled with dynamic sql queries, Password retrieval mechanism are poor,  ",Explicitly disable the autocomplete HTML attribute in sensitive forms and inputs. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtdata#autocomplete-input&amp;quot;&amp;amp;gt;https://aka.ms/tmtdata#autocomplete-input&amp;amp;lt;/a&amp;amp;gt; Perform input validation and filtering on all string type Model properties. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#typemodel&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#typemodel&amp;amp;lt;/a&amp;amp;gt; Validate all redirects within the application are closed or done safely. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#redirect-safe&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#redirect-safe&amp;amp;lt;/a&amp;amp;gt; Enable step up or adaptive authentication. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#step-up-adaptive-authn&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#step-up-adaptive-authn&amp;amp;lt;/a&amp;amp;gt; Implement forgot password functionalities securely. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#forgot-pword-fxn&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#forgot-pword-fxn&amp;amp;lt;/a&amp;amp;gt; Ensure that password and account policy are implemented. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthn#pword-account-policy&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthn#pword-account-policy&amp;amp;lt;/a&amp;amp;gt; Implement input validation on all string type parameters accepted by Controller methods. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#string-method&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#string-method&amp;amp;lt;/a&amp;amp;gt;,,,,,
24,An adversary can gain access to sensitive data by performing SQL injection through Web API,Tampering,Mobile App Request,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ","Ensure that type-safe parameters are used in Web API for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe-api"">https://aka.ms/tmtinputval#typesafe-api</a>",,,,,
25,An adversary can reverse engineer and tamper binaries,Tampering,Mobile App Request,"An adversary can use various tools, reverse engineer binaries and abuse them by tampering","Obfuscate generated binaries before distributing to end users. Refer: <a href=""https://aka.ms/tmtdata#binaries-end"">https://aka.ms/tmtdata#binaries-end</a>",,,,,
26,An adversary may inject malicious inputs into an API and affect downstream processes,Tampering,Mobile App Request,An adversary may inject malicious inputs into an API and affect downstream processes,"Ensure that model validation is done on Web API methods. Refer: <a href=""https://aka.ms/tmtinputval#validation-api"">https://aka.ms/tmtinputval#validation-api</a>  Implement input validation on all string type parameters accepted by Web API methods. Refer: <a href=""https://aka.ms/tmtinputval#string-api"">https://aka.ms/tmtinputval#string-api</a>",,,,,
27,"An adversary may spoof Mobile App (IOS, Android) and gain access to Web API",Spoofing,Mobile App Request,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application ","Ensure that standard authentication techniques are used to secure Web APIs. Refer: <a href=""https://aka.ms/tmtauthn#authn-secure-api"">https://aka.ms/tmtauthn#authn-secure-api</a>",,,,,
28,"An adversary obtains refresh or access tokens from Mobile App (IOS, Android) and uses them to obtain access to the Mango Web API API",Spoofing,Mobile App Request,"On a public client (e.g. a mobile device), refresh tokens may be stolen and used by an attacker to obtain access to the API. Depending on the client type, there are different ways that tokens may be revealed to an attacker and therefore different ways to protect them, some involving how the software using the tokens requests, stores and refreshes them.","Use ADAL libraries to manage token requests from OAuth2 clients to AAD (or on-premises AD). Refer: <a href=""https://aka.ms/tmtauthn#adal-oauth2"">https://aka.ms/tmtauthn#adal-oauth2</a>",,,,,
29,Attacker can deny a malicious act on an API leading to repudiation issues,Repudiation,Mobile App Request,Attacker can deny a malicious act on an API leading to repudiation issues,"Ensure that auditing and logging is enforced on Web API. Refer: <a href=""https://aka.ms/tmtauditlog#logging-web-api"">https://aka.ms/tmtauditlog#logging-web-api</a>",,,,,
30,An adversary can gain access to sensitive data stored in Web API's config files,Information Disclosure,Mobile App Request,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.","Encrypt sections of Web API's configuration files that contain sensitive data. Refer: <a href=""https://aka.ms/tmtconfigmgmt#config-sensitive"">https://aka.ms/tmtconfigmgmt#config-sensitive</a>",,,,,
31,An adversary can gain sensitive data from mobile device,Information Disclosure,Mobile App Request,"If application saves sensitive PII or HBI data on phone SD card or local storage, then it ay get stolen.","Encrypt sensitive or PII data written to phones local storage. Refer: <a href=""https://aka.ms/tmtdata#pii-phones"">https://aka.ms/tmtdata#pii-phones</a>",,,,,
32,An adversary can gain access to sensitive data by sniffing traffic to Web API,Information Disclosure,Mobile App Request,An adversary can gain access to sensitive data by sniffing traffic to Web API,"Force all traffic to Web APIs over HTTPS connection. Refer: <a href=""https://aka.ms/tmtcommsec#webapi-https"">https://aka.ms/tmtcommsec#webapi-https</a>",,,,,
33,An adversary can gain access to sensitive data by sniffing traffic from Mobile client,Information Disclosure,Mobile App Request,An adversary can gain access to sensitive data by sniffing traffic from Mobile client,"Implement Certificate Pinning. Refer: <a href=""https://aka.ms/tmtcommsec#cert-pinning"">https://aka.ms/tmtcommsec#cert-pinning</a>",,,,,
34,An adversary can gain access to sensitive information from an API through error messages,Information Disclosure,Mobile App Request,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names - Connection strings - Usernames - Passwords - SQL procedures - Details of dynamic SQL failures - Stack trace and lines of code - Variables stored in memory - Drive and folder locations - Application install points - Host configuration settings - Other internal application details ","Ensure that proper exception handling is done in ASP.NET Web API. Refer: <a href=""https://aka.ms/tmtxmgmt#exception"">https://aka.ms/tmtxmgmt#exception</a>",,,,,
35,An adversary may gain unauthorized access to Web API due to poor access control checks,Elevation of Privileges,Mobile App Request,An adversary may gain unauthorized access to Web API due to poor access control checks,"Implement proper authorization mechanism in ASP.NET Web API. Refer: <a href=""https://aka.ms/tmtauthz#authz-aspnet"">https://aka.ms/tmtauthz#authz-aspnet</a>",,,,,
36,An adversary may jail break into a mobile device and gain elevated privileges,Elevation of Privileges,Mobile App Request,An adversary may jail break into a mobile device and gain elevated privileges,"Implement implicit jailbreak or rooting detection. Refer: <a href=""https://aka.ms/tmtauthz#rooting-detection"">https://aka.ms/tmtauthz#rooting-detection</a>",,,,,
37,An adversary can gain access to sensitive data stored in Web App's config files,Tampering,Browser UI Update,"An adversary can gain access to the config files. and if sensitive data is stored in it, it would be compromised.","Encrypt sections of Web App's configuration files that contain sensitive data. Refer: <a href=""https://aka.ms/tmtdata#encrypt-data"">https://aka.ms/tmtdata#encrypt-data</a>",,,,,
38,An adversary can gain access to sensitive data by performing SQL injection through Web App,Tampering,Browser UI Update,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ","Ensure that type-safe parameters are used in Web Application for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe"">https://aka.ms/tmtinputval#typesafe</a>",,,,,
39,An attacker steals messages off the network and replays them in order to steal a user's session,Tampering,Browser UI Update,An attacker steals messages off the network and replays them in order to steal a user's session,,,,,,
40,An adversary can deface the target web application by injecting malicious code or uploading dangerous files,Tampering,Browser UI Update,Website defacement is an attack on a website where the attacker changes the visual appearance of the site or a webpage. ,"Implement Content Security Policy (CSP), and disable inline javascript. Refer: <a href=""https://aka.ms/tmtconfigmgmt#csp-js"">https://aka.ms/tmtconfigmgmt#csp-js</a>  Enable browser's XSS filter. Refer: <a href=""https://aka.ms/tmtconfigmgmt#xss-filter"">https://aka.ms/tmtconfigmgmt#xss-filter</a>  Access third party javascripts from trusted sources only. Refer: <a href=""https://aka.ms/tmtconfigmgmt#js-trusted"">https://aka.ms/tmtconfigmgmt#js-trusted</a>  Enable ValidateRequest attribute on ASP.NET Pages. Refer: <a href=""https://aka.ms/tmtconfigmgmt#validate-aspnet"">https://aka.ms/tmtconfigmgmt#validate-aspnet</a>  Ensure that each page that could contain user controllable content opts out of automatic MIME sniffing . Refer: <a href=""https://aka.ms/tmtinputval#out-sniffing"">https://aka.ms/tmtinputval#out-sniffing</a>  Use locally-hosted latest versions of JavaScript libraries . Refer: <a href=""https://aka.ms/tmtconfigmgmt#local-js"">https://aka.ms/tmtconfigmgmt#local-js</a>  Ensure appropriate controls are in place when accepting files from users. Refer: <a href=""https://aka.ms/tmtinputval#controls-users"">https://aka.ms/tmtinputval#controls-users</a>  Disable automatic MIME sniffing. Refer: <a href=""https://aka.ms/tmtconfigmgmt#mime-sniff"">https://aka.ms/tmtconfigmgmt#mime-sniff</a>  Encode untrusted web output prior to rendering. Refer: <a href=""https://aka.ms/tmtinputval#rendering"">https://aka.ms/tmtinputval#rendering</a>  Perform input validation and filtering on all string type Model properties. Refer: <a href=""https://aka.ms/tmtinputval#typemodel"">https://aka.ms/tmtinputval#typemodel</a>  Ensure that the system has inbuilt defences against misuse. Refer: <a href=""https://aka.ms/tmtauditlog#inbuilt-defenses"">https://aka.ms/tmtauditlog#inbuilt-defenses</a>  Enable HTTP Strict Transport Security (HSTS). Refer: <a href=""https://aka.ms/tmtcommsec#http-hsts"">https://aka.ms/tmtcommsec#http-hsts</a>  Implement input validation on all string type parameters accepted by Controller methods. Refer: <a href=""https://aka.ms/tmtinputval#string-method"">https://aka.ms/tmtinputval#string-method</a>  Avoid using Html.Raw in Razor views. Refer: <a href=""https://aka.ms/tmtinputval#html-razor"">https://aka.ms/tmtinputval#html-razor</a>  Sanitization should be applied on form fields that accept all characters e.g, rich text editor . Refer: <a href=""https://aka.ms/tmtinputval#richtext"">https://aka.ms/tmtinputval#richtext</a>  Do not assign DOM elements to sinks that do not have inbuilt encoding . Refer: <a href=""https://aka.ms/tmtinputval#inbuilt-encode"">https://aka.ms/tmtinputval#inbuilt-encode</a>",,,,,
41,An adversary may spoof Desktop Web Browser (Chrome) and gain access to Web Application,Spoofing,Browser UI Update,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application","Consider using a standard authentication mechanism to authenticate to Web Application. Refer: <a href=""https://aka.ms/tmtauthn#standard-authn-web-app"">https://aka.ms/tmtauthn#standard-authn-web-app</a>",,,,,
42,An adversary can create a fake website and launch phishing attacks,Spoofing,Browser UI Update,"Phishing is attempted to obtain sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money), often for malicious reasons, by masquerading as a Web Server which is a trustworthy entity in electronic communication","Verify X.509 certificates used to authenticate SSL, TLS, and DTLS connections. Refer: <a href=""https://aka.ms/tmtcommsec#x509-ssltls"">https://aka.ms/tmtcommsec#x509-ssltls</a>  Ensure that authenticated ASP.NET pages incorporate UI Redressing or clickjacking defences. Refer: <a href=""https://aka.ms/tmtconfigmgmt#ui-defenses"">https://aka.ms/tmtconfigmgmt#ui-defenses</a>  Validate all redirects within the application are closed or done safely. Refer: <a href=""https://aka.ms/tmtinputval#redirect-safe"">https://aka.ms/tmtinputval#redirect-safe</a>",,,,,
43,Attackers can steal user session cookies due to insecure cookie attributes,Spoofing,Browser UI Update,The session cookies is the identifier by which the server knows the identity of current user for each incoming request. If the attacker is able to steal the user token he would be able to access all user data and perform all actions on behalf of user. ,"Applications available over HTTPS must use secure cookies. Refer: <a href=""https://aka.ms/tmtsmgmt#https-secure-cookies"">https://aka.ms/tmtsmgmt#https-secure-cookies</a>  All http based application should specify http only for cookie definition. Refer: <a href=""https://aka.ms/tmtsmgmt#cookie-definition"">https://aka.ms/tmtsmgmt#cookie-definition</a>",,,,,
44,An adversary can get access to a user's session due to insecure coding practices,Spoofing,Browser UI Update,The session cookies is the identifier by which the server knows the identity of current user for each incoming request. If the attacker is able to steal the user token he would be able to access all user data and perform all actions on behalf of user.,"Enable ValidateRequest attribute on ASP.NET Pages. Refer: <a href=""https://aka.ms/tmtconfigmgmt#validate-aspnet"">https://aka.ms/tmtconfigmgmt#validate-aspnet</a>  Encode untrusted web output prior to rendering. Refer: <a href=""https://aka.ms/tmtinputval#rendering"">https://aka.ms/tmtinputval#rendering</a>  Avoid using Html.Raw in Razor views. Refer: <a href=""https://aka.ms/tmtinputval#html-razor"">https://aka.ms/tmtinputval#html-razor</a>  Sanitization should be applied on form fields that accept all characters e.g, rich text editor . Refer: <a href=""https://aka.ms/tmtinputval#richtext"">https://aka.ms/tmtinputval#richtext</a>  Do not assign DOM elements to sinks that do not have inbuilt encoding . Refer: <a href=""https://aka.ms/tmtinputval#inbuilt-encode"">https://aka.ms/tmtinputval#inbuilt-encode</a>",,,,,
45,An adversary can get access to a user's session due to improper logout and timeout,Spoofing,Browser UI Update,The session cookies is the identifier by which the server knows the identity of current user for each incoming request. If the attacker is able to steal the user token he would be able to access all user data and perform all actions on behalf of user.,"Set up session for inactivity lifetime. Refer: <a href=""https://aka.ms/tmtsmgmt#inactivity-lifetime"">https://aka.ms/tmtsmgmt#inactivity-lifetime</a>  Implement proper logout from the application. Refer: <a href=""https://aka.ms/tmtsmgmt#proper-app-logout"">https://aka.ms/tmtsmgmt#proper-app-logout</a>",,,,,
46,Attacker can deny the malicious act and remove the attack foot prints leading to repudiation issues,Repudiation,Browser UI Update,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system","Ensure that auditing and logging is enforced on the application. Refer: <a href=""https://aka.ms/tmtauditlog#auditing"">https://aka.ms/tmtauditlog#auditing</a>  Ensure that log rotation and separation are in place. Refer: <a href=""https://aka.ms/tmtauditlog#log-rotation"">https://aka.ms/tmtauditlog#log-rotation</a>  Ensure that Audit and Log Files have Restricted Access. Refer: <a href=""https://aka.ms/tmtauditlog#log-restricted-access"">https://aka.ms/tmtauditlog#log-restricted-access</a>  Ensure that User Management Events are Logged. Refer: <a href=""https://aka.ms/tmtauditlog#user-management"">https://aka.ms/tmtauditlog#user-management</a>",,,,,
47,An adversary may gain access to sensitive data from uncleared browser cache,Information Disclosure,Browser UI Update,An adversary may gain access to sensitive data from uncleared browser cache,"Ensure that sensitive content is not cached on the browser. Refer: <a href=""https://aka.ms/tmtdata#cache-browser"">https://aka.ms/tmtdata#cache-browser</a>",,,,,
48,An adversary can gain access to sensitive information through error messages,Information Disclosure,Browser UI Update,"An adversary can gain access to sensitive data such as the following, through verbose error messages - Server names  - Connection strings  - Usernames  - Passwords  - SQL procedures  - Details of dynamic SQL failures  - Stack trace and lines of code  - Variables stored in memory  - Drive and folder locations  - Application install points  - Host configuration settings  - Other internal application details ","Do not expose security details in error messages. Refer: <a href=""https://aka.ms/tmtxmgmt#messages"">https://aka.ms/tmtxmgmt#messages</a>  Implement Default error handling page. Refer: <a href=""https://aka.ms/tmtxmgmt#default"">https://aka.ms/tmtxmgmt#default</a>  Set Deployment Method to Retail in IIS. Refer: <a href=""https://aka.ms/tmtxmgmt#deployment"">https://aka.ms/tmtxmgmt#deployment</a>  Exceptions should fail safely. Refer: <a href=""https://aka.ms/tmtxmgmt#fail"">https://aka.ms/tmtxmgmt#fail</a>  ASP.NET applications must disable tracing and debugging prior to deployment. Refer: <a href=""https://aka.ms/tmtconfigmgmt#trace-deploy"">https://aka.ms/tmtconfigmgmt#trace-deploy</a>  Implement controls to prevent username enumeration. Refer: <a href=""https://aka.ms/tmtauthn#controls-username-enum"">https://aka.ms/tmtauthn#controls-username-enum</a>",,,,,
49,An adversary can gain access to sensitive data by sniffing traffic to Web Application,Information Disclosure,Browser UI Update,"An adversary may conduct man in the middle attack and downgrade TLS connection to clear text protocol, or forcing browser communication to pass through a proxy server that he controls. This may happen because the application may use mixed content or HTTP Strict Transport Security policy is not ensured.","Applications available over HTTPS must use secure cookies. Refer: <a href=""https://aka.ms/tmtsmgmt#https-secure-cookies"">https://aka.ms/tmtsmgmt#https-secure-cookies</a>  Enable HTTP Strict Transport Security (HSTS). Refer: <a href=""https://aka.ms/tmtcommsec#http-hsts"">https://aka.ms/tmtcommsec#http-hsts</a>",,,,,
50,An adversary can gain access to certain pages or the site as a whole.,Information Disclosure,Browser UI Update,Robots.txt is often found in your site's root directory and exists to regulate the bots that crawl your site. This is where you can grant or deny permission to all or some specific search engine robots to access certain pages or your site as a whole. The standard for this file was developed in 1994 and is known as the Robots Exclusion Standard or Robots Exclusion Protocol. Detailed info about the robots.txt protocol can be found at robotstxt.org.,"Ensure that administrative interfaces are appropriately locked down. Refer: <a href=""https://aka.ms/tmtauthn#admin-interface-lockdown"">https://aka.ms/tmtauthn#admin-interface-lockdown</a>",,,,,
51,An adversary may gain access to unmasked sensitive data such as credit card numbers,Information Disclosure,Browser UI Update,An adversary may gain access to unmasked sensitive data such as credit card numbers,"Ensure that sensitive data displayed on the user screen is masked. Refer: <a href=""https://aka.ms/tmtdata#data-mask"">https://aka.ms/tmtdata#data-mask</a>",,,,,
52,An adversary can gain access to sensitive data by performing SQL injection through Web App,Tampering,Web API Response,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ","Ensure that type-safe parameters are used in Web Application for data access. Refer: <a href=""https://aka.ms/tmtinputval#typesafe"">https://aka.ms/tmtinputval#typesafe</a>",,,,,
53,An adversary may spoof Mango Web API and gain access to Web Application,Spoofing,Web API Response,"If proper authentication is not in place, an adversary can spoof a source process or external entity and gain unauthorized access to the Web Application","Consider using a standard authentication mechanism to authenticate to Web Application. Refer: <a href=""https://aka.ms/tmtauthn#standard-authn-web-app"">https://aka.ms/tmtauthn#standard-authn-web-app</a>",,,,,
54,An adversary can gain unauthorized access to database due to loose authorization rules,Elevation of Privileges,DB Request,Database access should be configured with roles and privilege based on least privilege and need to know principle. ,Ensure that least-privileged accounts are used to connect to Database server. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#privileged-server&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#privileged-server&amp;amp;lt;/a&amp;amp;gt; Implement Row Level Security RLS to prevent tenants from accessing each others data. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#rls-tenants&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#rls-tenants&amp;amp;lt;/a&amp;amp;gt; Sysadmin role should only have valid necessary users . Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#sysadmin-users&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#sysadmin-users&amp;amp;lt;/a&amp;amp;gt;,,,,,
55,An adversary can gain access to sensitive PII or HBI data in database,Information Disclosure,DB Request,"Additional controls like Transparent Data Encryption, Column Level Encryption, EKM etc. provide additional protection mechanism to high value PII or HBI data. ",Use strong encryption algorithms to encrypt data in the database. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#strong-db&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#strong-db&amp;amp;lt;/a&amp;amp;gt; Ensure that sensitive data in database columns is encrypted. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtdata#db-encrypted&amp;quot;&amp;amp;gt;https://aka.ms/tmtdata#db-encrypted&amp;amp;lt;/a&amp;amp;gt; Ensure that database-level encryption (TDE) is enabled. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtdata#tde-enabled&amp;quot;&amp;amp;gt;https://aka.ms/tmtdata#tde-enabled&amp;amp;lt;/a&amp;amp;gt; Ensure that database backups are encrypted. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtdata#backup&amp;quot;&amp;amp;gt;https://aka.ms/tmtdata#backup&amp;amp;lt;/a&amp;amp;gt; Use SQL server EKM to protect encryption keys. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#ekm-keys&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#ekm-keys&amp;amp;lt;/a&amp;amp;gt; Use AlwaysEncrypted feature if encryption keys should not be revealed to Database engine. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#keys-engine&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#keys-engine&amp;amp;lt;/a&amp;amp;gt;,,,,,
56,An adversary can gain access to sensitive data by performing SQL injection,Information Disclosure,DB Request,"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. The primary form of SQL injection consists of direct insertion of code into user-input variables that are concatenated with SQL commands and executed. A less direct attack injects malicious code into strings that are destined for storage in a table or as metadata. When the stored strings are subsequently concatenated into a dynamic SQL command, the malicious code is executed. ",Ensure that login auditing is enabled on SQL Server. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#identify-sensitive-entities&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#identify-sensitive-entities&amp;amp;lt;/a&amp;amp;gt; Ensure that least-privileged accounts are used to connect to Database server. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauthz#privileged-server&amp;quot;&amp;amp;gt;https://aka.ms/tmtauthz#privileged-server&amp;amp;lt;/a&amp;amp;gt; Enable Threat detection on Azure SQL database. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#threat-detection&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#threat-detection&amp;amp;lt;/a&amp;amp;gt; Do not use dynamic queries in stored procedures. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtinputval#stored-proc&amp;quot;&amp;amp;gt;https://aka.ms/tmtinputval#stored-proc&amp;amp;lt;/a&amp;amp;gt;,,,,,
57,An adversary can deny actions on database due to lack of auditing,Repudiation,DB Request,"Proper logging of all security events and user actions builds traceability in a system and denies any possible repudiation issues. In the absence of proper auditing and logging controls, it would become impossible to implement any accountability in a system.",Ensure that login auditing is enabled on SQL Server. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#identify-sensitive-entities&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#identify-sensitive-entities&amp;amp;lt;/a&amp;amp;gt;,,,,,
58,An adversary can tamper critical database securables and deny the action,Tampering,DB Request,An adversary can tamper critical database securables and deny the action,Add digital signature to critical database securables. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtcrypto#securables-db&amp;quot;&amp;amp;gt;https://aka.ms/tmtcrypto#securables-db&amp;amp;lt;/a&amp;amp;gt;,,,,,
59,An adversary may leverage the lack of monitoring systems and trigger anomalous traffic to database,Tampering,DB Request,An adversary may leverage the lack of intrusion detection and prevention  of anomalous database activities and  trigger anomalous traffic to database,Enable Threat detection on Azure SQL database. Refer: &amp;amp;lt;a href=&amp;quot;https://aka.ms/tmtauditlog#threat-detection&amp;quot;&amp;amp;gt;https://aka.ms/tmtauditlog#threat-detection&amp;amp;lt;/a&amp;amp;gt;,,,,,
