1) details of the partner -- make table width as page width. Страница i -- сделать таблицу по ширине страницы
2) после details of the partner добавить страницу PROJECT ASSUMPTIONS, текст такой же как в шаблоне, все точная копия
3) после PROJECT ASSUMPTIONS добавить страницу IMPLEMENTATION, все точная копия как в темплейте
4) Убрать заголовок главы Chapter N, пример: System Requirements, lines 1-2. В каждой главе убрать Chapter N как в System Requirements

Мы бы хотели начать наш тезис с общего описания системы коммуникации, возможных уязвимостей, и акторов, учавствующих в ней.
Так как задача данного тезиса -- это реализовать программные компоненты, удовлетворяющие заданным требованиям безопасности,
а именно: веб клиент, веб сервер, мобильный клиент, настольный клиент и база данных, то именно эти компоненты и будут нашими акторами.
Коммуникация между компонентами происходит по HTTPS протоколу.
В качестве бекенда используется РЕСТ апи, а следовательно, формат данных передаваемых от клиента к серверу это JSON.
Следюущая диаграмма описывает базовый концепт системы, и передает взаимосвязи между акторами, упомянутые выше.

[Screen]

Отсюда, коммуникация между программными компонентами построена следующим образом

Веб браузер -- Веб приложение -- Сервер -- База данных

-- Веб браузер посылат запрос обновления интерфейса на веб приложение
-- Веб приложение транслирует запрос на сервер
-- Сервер исполняет бизнес логику и проверяет права доступа, обращаясь к базе данных
-- Сервер отвечает веб приложению
-- Интерфейс пользователя браузера обновлен

Настольный клиент -- Сервер -- База данных

-- Настольный клиент посылает запрос на обновление пользовательского интерфейса
-- Сервер исполняет бизнес логику и проверяет права доступа, обращаясь к базе данных
-- Сервер отвечает настольному клиенту
-- Пользовательский интерфейс настольного приложения обновлен согласно ответу от сервера

Мобильный клиент -- Сервер -- База данных

-- Мобильный клиент посылает запрос на обновление пользовательского интерфейса
-- Сервер исполняет бизнес логику и проверяет права доступа, обращаясь к базе данных
-- Сервер отвечает настольному клиенту
-- Пользовательский интерфейс мобильного приложения обновлен согласно ответу от сервера

Однако, такая модель коммуникации может нести определенные уязвимости безопасности, о чем и идет речь далее.
Рассмотрим коммуникацию Веб браузер -- Веб приложение -- Сервер -- База данных, первая уязвимость что приходит на ум
это фишинг.
Злоумышленник может запустить свой собственное веб приложение, потребляющее тот же самый веб сервер, таким образом,
возможно логировать действия пользователя и заполучить личные данные или учетную запись.
Такая уязвимость устраняется используя правильно настроенную политику Cross-Origin Resource Sharing, которая ограничит
возможность запросов с доменов, не удовлетворяющих политике.

* код корс из стартапа *

Следующая потенциальная уязвимость -- неправильно сконфигурированный TLS/SSL сертификат или самоподписанный сертификат,
для устранения уязвимости TLS сертификата необходимо следовать инструкциям https://www.ssl.com/guide/ssl-best-practices/.
Кроме этого, потенциальная уязвимость кроется в возможности SQL инъекций, устраняется такая узявимость использованием
параметров в строчных литералах SQL запроса к базе данных, так же стоит обратить внимание на конфигурацию используемой
ORM.
Присутствует так же опасность получения злоумышленником информации об устройстве приложения через логи ошибок в ответе от сервера,
таким образом, рекомендуется использовать унифицированный формат ответа от сервера https://datatracker.ietf.org/doc/html/rfc7231,
который в случае ошибки не будет содержать деталей ошибки.
Так же, рекоммендуется использовать систему ролей для пользователей, дабы ограничить неавторизированного клиента от использования
ресурсов, доступных только администраторам.

